{:rename-macros {}, :renames {}, :use-macros {go cljs.core.async.macros}, :excludes #{}, :name pitchfx.core, :imports nil, :requires {pitchfx.handlers pitchfx.handlers, reagent reagent.core, clojure.reader cljs.reader, views pitchfx.views, reagent.core reagent.core, r cljs.reader, cljs-http.client cljs-http.client, pitchfx.subs pitchfx.subs, cljs.core.async cljs.core.async, pitchfx.views pitchfx.views, config pitchfx.config, devtools devtools.core, pitchfx.config pitchfx.config, devtools.core devtools.core, cljs.reader cljs.reader, re-frame re-frame.core, http cljs-http.client, re-frame.core re-frame.core}, :uses {<! cljs.core.async}, :defs {dev-setup {:protocol-inline nil, :meta {:file "/Users/jonadelson/MachineLearning/PaisleyBayes/website/pitchfx/src/cljs/pitchfx/core.cljs", :line 15, :column 7, :end-line 15, :end-column 16, :arglists (quote ([]))}, :name pitchfx.core/dev-setup, :variadic false, :file "src/cljs/pitchfx/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mount-root {:protocol-inline nil, :meta {:file "/Users/jonadelson/MachineLearning/PaisleyBayes/website/pitchfx/src/cljs/pitchfx/core.cljs", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([]))}, :name pitchfx.core/mount-root, :variadic false, :file "src/cljs/pitchfx/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init {:protocol-inline nil, :meta {:file "/Users/jonadelson/MachineLearning/PaisleyBayes/website/pitchfx/src/cljs/pitchfx/core.cljs", :line 25, :column 16, :end-line 25, :end-column 20, :export true, :arglists (quote ([]))}, :name pitchfx.core/init, :variadic false, :file "src/cljs/pitchfx/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:initialize-db :else :set-window-dims :recur :set-cluster-attrs :set-loaded :body :set-app-data}, :order [:initialize-db :body :set-app-data :set-cluster-attrs :set-window-dims :set-loaded :recur :else]}, :doc nil}